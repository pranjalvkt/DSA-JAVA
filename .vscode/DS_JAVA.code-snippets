{
	// Place your DS_JAVA workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Class Initialization Description" :{
		"prefix": "des",
		"body": [
			"/*",
			"*   @author",
			"*   Pranjal Tripathi",
			"*/"
		]
		
	},
	"Java Template for CodeChef": {
		"prefix": "codechef",
		"body": [
		  	"package CodeChef; // REMOVE PACKAGE ",
		  	"import java.util.*;",
            "import java.io.*;",
		  	"",
		  	"public class ${1:ClassName} { // CHANGE CLASS DECLARATION TO--> \"class CodeChef\"",
		  	"    public static void main(String[] args) {",
		  	"        try {",
			"            FastReader fs = new FastReader();",
		  	"            /* WRITE YOUR CODE HERE */",
		  	"            $2",
		  	"            ",
		  	"",
		  	"        } catch(Exception e) {",
		  	"            return;",
		  	"        }",
		  	"        ",
		  	"    }",
				"static class FastReader {",
				"    BufferedReader br;",
				"    StringTokenizer st;",
				" ",
				"    public FastReader()",
				"    {",
				"        br = new BufferedReader(",
				"        new InputStreamReader(System.in));",
				"    }",
				" ",
				"    String next()",
				"    {",
				"          while (st == null || !st.hasMoreElements()) {",
				"              try {",
				"                  st = new StringTokenizer(br.readLine());",
				"              }",
				"              catch (IOException e) {",
				"                  e.printStackTrace();",
				"              }",
				"          }",
				"          return st.nextToken();",
				"    }",
				" ",
				"    int nextInt() { return Integer.parseInt(next()); }",
				" ",
				"    long nextLong() { return Long.parseLong(next()); }",
				" ",
				"    double nextDouble()",
				"    {",
				"        return Double.parseDouble(next());",
				"    }",
				"",
				"    float nextFloat()",
				"    {",
				"        return Float.parseFloat(next());",
				"    }",
				" ",
				"    String nextLine()",
				"    {",
				"        String str = \"\";",
				"            try {",
				"                str = br.readLine();",
				"            }",
				"            catch (IOException e) {",
				"                e.printStackTrace();",
				"            }",
				"        return str;",
				"    }",
				"",
				"    int[] readArray(int n) {",
				"        int[] a=new int[n];",
				"        for (int i=0; i<n; i++) a[i]=nextInt();",
				"        return a;",
				"    }",
				"",
				"    long[] readArrayLong(int n) {",
				"        long[] a=new long[n];",
				"        for (int i=0; i<n; i++) a[i]=nextLong();",
				"        return a;",
				"    }",
				"}",
		"}",
		],
		"description": "Java Template for CodeChef"
	},
	"Fast IO": {
		"prefix": "fastio",
		"body": [
		"package ${1:PackageName}; // REMOVE PACKAGE ",
		  "import java.util.*;",
		  "import java.io.*;",
		  "",
		  "public class ${2:ClassName} {// CHANGE CLASS DECLARATION TO--> \"class CodeChef\"",
		  "    static class FastReader {",
		  "        BufferedReader br;",
		  "        StringTokenizer st;",
		  "        public FastReader() {",
		  "            br=new BufferedReader(new InputStreamReader(System.in));",
		  "        }",
		  "        String next() {",
		  "            while(st == null || !st.hasMoreTokens()) {",
		  "                try {",
		  "                    st = new StringTokenizer(br.readLine());",
		  "                } catch (IOException e) {",
		  "                    e.printStackTrace();",
		  "                }",
		  "            }",
		  "            return st.nextToken();",
		  "        }",
		  "        int nextInt() {",
		  "            return Integer.parseInt(next());",
		  "        }",
		  "        long nextLong() {",
		  "            return Long.parseLong(next());",
		  "        }",
		  "        double nextDouble() {",
		  "            return Double.parseDouble(next());",
		  "        }",
		  "        String nextLine(){",
		  "            String str = \"\";",
		  "            try {",
		  "                str = br.readLine().trim();",
		  "            } catch (Exception e) {",
		  "                e.printStackTrace();",
		  "            }",
		  "            return str;",
		  "        }",
		  "    }",
		  "    static class FastWriter {",
		  "        private final BufferedWriter bw;",
		  "",
		  "        public FastWriter() {",
		  "            this.bw = new BufferedWriter(new OutputStreamWriter(System.out));",
		  "        }",
		  "",
		  "        public void print(Object object) throws IOException {",
		  "            bw.append(\"\" + object);",
		  "        }",
		  "",
		  "        public void println(Object object) throws IOException {",
		  "            print(object);",
		  "            bw.append(\"\\n\");",
		  "        }",
		  "",
		  "        public void close() throws IOException {",
		  "            bw.close();",
		  "        }",
		  "    }",
		  "    public static void main(String[] args) {",
		  "        try {",
		  "            FastReader fs = new FastReader();",
		  "            FastWriter out = new FastWriter();",
		  "            int t = fs.nextInt();",
		  "            while(t-- > 0){",
		  "                /* WRITE YOUR CODE HERE */",
		  "                $3",
		  "            }",
		  "            out.close();",
		  "        } catch (Exception e) {",
		  "            return;",
		  "        }",
		  "    }",
		  "}"
		],
		"description": "Fast IO"
	  }

}